design of a search API
***********************

how they can call?
******************
ontology filters
	/{user-a-id}/friends/{user-b-id} -> sam friends with shyam
    /{user-id}/likes/{page-id} -> sam likes rafting

json queries

ids encryption and combo reference ids. ..

sql inspiration
	orderby, 
	selected fields only , nested/multiple queries
		GET googleapis.com/demo/v1?key=YOUR-API-KEY&fields=kind,items(title,characteristics/length)  (xpath)
		GET graph.facebook.com/me?fields=albums.limit(5),posts.limit(5)
		GET graph.facebook.com/?ids=platform,me
		GET graph.facebook.com/photos?ids={user-id-a},{user-id-b}
		GET googleapis.com/freebase/v1/topic/en/barack_obama?filter=/speeches/newyork/april&limit=1
	nested
		GET graph.facebook.com/me?fields=albums.limit(5){name, photos.limit(2)},posts.limit(5)
	filter token functions  (like-regex, sounds-like, fuzzy, transpose, range)
	groupby
	boolean operators: 
		& | (include) 
		! (exclude)
	pipelining

1 single network aggregate search calling multiple small apis 
	curl \
    -F 'access_token=â€¦' \
    -F 'batch=[{ "method":"POST","relative_url":"me/feed","body":"message=Test status update&link=http://developers.facebook.com/"},{ "method":"GET","relative_url":"me/feed?limit=1"}]' \
    https://graph.facebook.com



tracker tokens; 



	

how we can reply?
*****************
hateos links
pagination
metadata describing how the search happened (34000->zip->1000->name sounds like->30->..)
suggestions or recommended search criteria
server push