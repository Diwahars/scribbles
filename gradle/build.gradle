
//#1 task basics
//**********************************************************
//reading from other files
apply from:'other.gradle'

defaultTasks 'dude'

//accessing preset variable
println "project name: $project.name"

//define local variable
def p1='p1-value'
println "p1 local variable is $p1"

//#1.1 task dependencies
//gradle -q greet -> Hey there lazy dude!
task hey << {
	print "Hey "
}

task there << {
	print "there "
}

task dude(dependsOn: [hey,there,'lazy']) << {
	print "dude! "
}

task lazy << {
	print "lazy "
}

//#1.2 lamda, task property, methods **************************
//gradle -q count -> 0123
task count << {
	ext.increment = 0

	10.times{ 
		print "$it "
		increment = increment +1
		hey
	}
	println ""
}
count.doFirst {
	println "started $count.name task"
}
count.doLast {
	println "stopped $count.name task with $count.increment"
}

//#1.3 dynamic task creation***********************************
//gradle -q dynamo task2 -> I am task2
task dynamo{
	4.times {
		counter -> 	task "task$counter" << {print "I am task $counter"}	
	}
}
//#1.4 folder manipulation ************************************
task copier(type: Copy)  {
	from "dir1"
   	into "dir2"
   	description "copy files from dir1 to dir2"
   	include('**/*.txt', '**/*.xml', '**/*.properties')

	doFirst{
		File dir2 = new File('dir2')
		dir2.deleteDir()
		println "dir2 deleted"
		dir2.mkdirs();
		println "dir2 created"
	}
	
	doLast{	
		println "files copied"
	}
}
//#1.5 overwriting tasks************************************
task copy(type: Copy) <<{
	println "I am old"
}

task copy(overwrite: true) << {
    println "I am the new one"
}

//#1.6 conditional tasks************************************
ext.friend = 'yep'

task hello << {
	println "Hey dude"
}
hello.onlyIf{project.hasProperty('friend')}

//#1.7 rule based tasks************************************
tasks.addRule("Pattern: ping<ID>") { String taskName ->
    if (taskName.startsWith("ping")) {
        task(taskName) << {
            println "Pinging: " + (taskName - 'ping')
        }
    }
}

task groupPing {
    dependsOn pingServer1, pingServer2
}
//#1.8 files ************************************************
task files{
	FileCollection collection = files('dir1/1.txt', new File('dir1/2.xml'), ['dir1/3.csv', 'dir1/4.properties'])
	collection.each {file -> println file.name+" "+file.absolutePath}
}

