1| COMMANDS
***********
	play new <app>
	cd <app>
	play
	run
	http://localhost:9000
//----------------------------------------------------------------------------------------------------------------------------
2| CONTROLLERS, ACTIONS & ROUTES
********************************
	2.1|Controller is a object containing Actions
	2.2|Action is Action.apply(request:Request) that returns Result written as 'Action{request=>Result}'
		
		Action { implicit request =>
  			Ok("Got request [" + request + "]")
		}

	2.3|OK,BadResult,Redirect,Found.NotFound..etc are types of Result
	2.4|Every method declared in a Controller must have a corresponding entry in 'conf/routes'

		GET 	tasks/:id  				controller.Application fetch(id:Long)  // here id is path parameter
		GET 	tasks/new/  			controller.Application.newTask(name:String) // here name is query string
		GET   	/items/$id<[0-9]+>    	controllers.Items.show(id: Long) // regex 
		GET   	/                     	controllers.Application.show(page = "home") //fixed default value
		GET   	/:page                	controllers.Application.show(page) 
	2.5| Many routes can match the same request. If there is a conflict, the first route (in declaration order) is used.	
	2.6| Adding header/cookies:
			val result = Ok("Hello World!").withHeaders( CACHE_CONTROL -> "max-age=3600",  ETAG -> "xx")
			val result = Ok("Hello world").withCookies(Cookie("theme", "blue"))		
			val result2 = result.discardingCookies(DiscardingCookie("theme"))
//----------------------------------------------------------------------------------------------------------------------------		
3| SESSION SCOPE
****************
	3.1| retrieve the incoming Session from the HTTP request:
		def index = Action { request =>
		  request.session.get("connected").map { user =>
		    Ok("Hello " + user)
		  }.getOrElse {
		    Unauthorized("Oops, you are not connected")
		  }
		}
	3.2| implicit request session fetch:
		def index = Action { implicit request =>
		  session.get("connected").map { user =>
		    Ok("Hello " + user)
		  }.getOrElse {
		    Unauthorized("Oops, you are not connected")
		  }
		}

	3.3| add to session:
		Ok("Welcome!").withSession("connected" -> "user@gmail.com")	
	3.4| update session
		Ok("Hello World!").withSession(session + ("saidHello" -> "yes"))	
	3.5| new session
		Ok("Bye").withNewSession	
//----------------------------------------------------------------------------------------------------------------------------		
4| FLASH SCOPE
**************
The Flash scope works exactly like the Session, but with two differences:
	a) data are kept for only one request
	b) the Flash cookie is not signed, making it possible for the user to modify it.

	def save = Action { Redirect("/home").flashing("success" -> "The item has been created")}
	def index = Action { implicit request => Ok {flash.get("success").getOrElse("Welcome!")}}

//----------------------------------------------------------------------------------------------------------------------------		
5| BODY PARSERS
*************** 
5.1| An HTTP PUT or POST request contains a body. This body can use any format, specified in the Content-Type request header.
	In Play, a body parser transforms this request body into a Scala value. 
	To summarize, an 'Action[A]' uses a 'BodyParser[A]' to retrieve a value of type A from the HTTP request, 
	and to build a 'Request[A]' object that is passed to the action code.
		
		trait Action[A] extends (Request[A] => Result) { 
			def parser: BodyParser[A]
		}
		trait Request[+A] extends RequestHeader {
	  		def body: A
		}

5.2| This body parser checks the Content-Type header and decides what kind of body to process:
		text/plain: String
		application/json: JsValue
		application/xml, text/xml or application/XXX+xml: NodeSeq
		application/form-url-encoded: Map[String, Seq[String]]
		multipart/form-data: MultipartFormData[TemporaryFile]
		any other content type: RawBuffer

5.3| The body parsers available in Play are defined in play.api.mvc.BodyParsers.parse.
		//text parser
		def save = Action(parse.text) { request =>
		  Ok("Got: " + request.body)
		}
		//file parser
		def save = Action(parse.file(to = new File("/tmp/upload"))) { request =>
  			Ok("Saved the request content to " + request.body)
		}
		//custom parser - save the file as username.upload
		val storeInUserFile = parse.using { request =>
		  request.session.get("username").map { user =>
		    file(to = new File("/tmp/" + user + ".upload"))
		  }.getOrElse {
		    sys.error("You don't have the right to upload here")
		  }
		}
		def save = Action(storeInUserFile) { request =>
		  Ok("Saved the request content to " + request.body)
		}
		//accept only 10KB of data.
		def save = Action(parse.maxLength(1024 * 10, storeInUserFile)) { request =>
		  Ok("Saved the request content to " + request.body)
		}

//----------------------------------------------------------------------------------------------------------------------------		
5| ACTION COMPOSITION
**********************
5.1| Custom Action using ActionBuilder 
		
	object LoggingAction extends ActionBuilder[Request] {
  		def invokeBlock[A](request: Request[A], block: (Request[A]) => Future[SimpleResult]) = {
    		Logger.info("Calling action")
    		block(request)
  		}
	}
	def index = LoggingAction {
  		Ok("Hello World")
	}	
//-------------------------------------------------------------
5.2| Extending Action
	
	case class Logging[A](action: Action[A]) extends Action[A] {
	  def apply(request: Request[A]): Future[SimpleResult] = {
	    Logger.info("Calling action")if 
	    action(request)
	  }
	  lazy val parser = action.parser
	}	
	def index = Logging {
		Action{Ok("Hello World")}
	}
//-------------------------------------------------------------	
5.3| Another way

	def logging[A](action: Action[A])= Action.async(action.parser) { request =>
	  Logger.info("Calling action")
	  action(request)
	}
//-------------------------------------------------------------	
5.4| Example to allow https only
def
	 onlyHttps[A](action: Action[A]) = Action.async(action.parser) { request =>
	  	request.headers.get("X-Forwarded-Proto").collect {
		    case "https" => action(request)
		  } getOrElse {
		    Future.successful(Forbidden("Only HTTPS requests allowed"))
		  }
	}	
//-------------------------------------------------------------		
5.5| Example for authentication

	class AuthenticatedRequest[A](val username: String, request: Request[A]) extends WrappedRequest[A](request)

	object Authenticated extends ActionBuilder[AuthenticatedRequest] {
	  def invokeBlock[A](request: Request[A], block: (AuthenticatedRequest[A]) => Future[SimpleResult]) = {
	    request.session.get("username").map { username =>
	      block(new AuthenticatedRequest(username, request))
	    } getOrElse {
	      Future.successful(Forbidden)
	    }
	  }
	}

	def currentUser = Authenticated { request =>
	  Ok("The current user is " + request.username)
	}

//----------------------------------------------------------------------------------------------------------------------------		
6| ASYNCHRONOUS HTTP 
*********************
The web client will be blocked while waiting for the response, 
but nothing will be blocked on the server, and server resources can be used to serve other clients.

6.1|Example1
	//an asynchronous operation returning a Future result
	val futurePIValue: Future[Double] = computePIAsynchronously() 
	//that asynchronous method is mapped with a callback to return OK
	val futureResult: Future[SimpleResult] = futurePIValue.map {pi => Ok("PI value computed: " + pi)}

6.2|Example2
	import play.api.libs.concurrent.Execution.Implicits.defaultContext

	def index = Action.async {
	  val futureInt = scala.concurrent.Future { intensiveComputation() }
	  futureInt.map(i => Ok("Got result: " + i))
	}
6.3|Handling timeout
	import play.api.libs.concurrent.Execution.Implicits.defaultContext
	import scala.concurrent.duration._

	def index = Action.async {
	  val futureInt = scala.concurrent.Future { intensiveComputation() }
	  val timeoutFuture = play.api.libs.concurrent.Promise.timeout("Oops", 1.second)
	  Future.firstCompletedOf(Seq(futureInt, timeoutFuture)).map {
	    case i: Int => Ok("Got result: " + i)
	    case t: String => InternalServerError(t)
	  }
	} 
//----------------------------------------------------------------------------------------------------------------------------		
7| STREAMING HTTP 
******************
7.1|Sending a big file in response that we donâ€™t want to load completely into memory
	
	def index = Action {
	  val file = new java.io.File("/tmp/fileToServe.pdf")
	  val fileContent: Enumerator[Array[Byte]] = Enumerator.fromFile(file)    
	  SimpleResult(
	    header = ResponseHeader(200, Map(CONTENT_LENGTH -> file.length.toString)),
	    body = fileContent
	  )
	}
7.2|Convenience APIs from Play4
	def index = Action {
	  Ok.sendFile(
	    content = new java.io.File("/tmp/fileToServe.pdf"),
	    fileName = _ => "termsOfService.pdf" //when 'save as', this name takes effect
	    inline = false //when true, the content will be embedded within browser   
	  )
	}
7.3| Chunked response: dynamically computed content, with no content size available.
	def index = Action {
	  val data = getDataStream
	  val dataContent: Enumerator[Array[Byte]] = Enumerator.fromStream(data)
	  Ok.chunked(dataContent)
	}
//----------------------------------------------------------------------------------------------------------------------------		
8| TEMPLATING 
*************
8.1| 'for loop'
	<ul>
	@for(p <- products) {
	  <li>@p.name ($@p.price)</li>
	}
	</ul>
8.2| 'if' 
	@if(items.isEmpty) {
	  <h1>Nothing to display</h1>
	} else {
	  <h1>@items.size items!</h1>
	}









 



















	